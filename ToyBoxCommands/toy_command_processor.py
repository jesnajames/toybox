import random
from Database.db_connect import DBConnector
from Infrastructure import ToyModel, ToyPurchaseModel, NotFoundException
import traceback

class ToyCommandProcessor:
    """
    Manages commands related to toy actions such as adding a new toy and processing toy purchases.
    Parameters: N/A
    Processing Logic:
        - It uses class methods, hence does not require instantiation.
        - Communicates with a database through DBConnector class for CRUD operations on toys.
        - Handles exceptions by printing the error and traceback, then returns an empty dictionary.
        - Throws a NotFoundException when a toy is not found during a purchase.
    """
    @classmethod
    def add_toy(cls, toy: ToyModel):
        """Adds a new toy to the database with a unique toy ID.
        Parameters:
            - toy (ToyModel): The ToyModel instance to add to the database.
        Returns:
            - ToyModel: The ToyModel instance with the toy_id set, if successful.
            - dict: An empty dictionary if an exception occurs during the database operation.
        Processing Logic:
            - A toy_id is generated by combining a fixed prefix with a random integer in the range of 200 to 500.
            - The toy's 'toy_id' attribute is set with this generated ID before saving to the database.
            - If an exception occurs during the database operation, the traceback is printed and an empty dict is returned."""
        try:
            toy_id = f"JP{random.randrange(200,500)}"
            toy.toy_id = toy_id
            response = DBConnector().add_item("toys", dict(toy))
            return toy
        except Exception as exc:
            print(exc, traceback.format_exc())
            return {}

    @classmethod
    def buy_toy(cls, toy_purchase: ToyPurchaseModel):
        """Process a toy purchase and update the database accordingly.
        Parameters:
            - toy_purchase (ToyPurchaseModel): An object containing the toy purchase information.
        Returns:
            - ToyModel: An object representing the updated toy information after purchase.
            - dict: An empty dictionary if an exception occurs.
        Processing Logic:
            - If the toy is not found in the database, a NotFoundException is raised.
            - The toy's availability is set to false to indicate it's been purchased.
            - The buyer's coordinates are added to the toy's information, if available."""
        try:
            toy_id = toy_purchase.toy_id
            current_toy = DBConnector().get_item("toys", "toy_id", toy_id)
            if not current_toy:
                raise NotFoundException(f"{toy_id} in not registered")
            current_toy["available"] = False
            current_toy["owner_id"] = toy_purchase.buyer_id
            current_toy["mrp"] = toy_purchase.selling_price

            buyer = DBConnector().get_item("users", "user_id", toy_purchase.buyer_id)
            current_toy["coordinates"] = buyer.get("coordinates", "")
            DBConnector().update_item("toys", "toy_id", toy_id, current_toy)
            return ToyModel(**current_toy)
        except Exception as exc:
            print(exc, traceback.format_exc())
            return {}
